openapi: 3.0.1
info:
  title: DevDojo Anime Service API
  version: v1
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /v1/producers:
    get:
      tags:
      - producer-controller
      operationId: findAllProducer
      parameters:
      - name: name
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProducerGetResponse'
      security:
      - basicAuth: []
    put:
      tags:
      - producer-controller
      operationId: updateProducer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProducerPutRequest'
        required: true
      responses:
        "200":
          description: OK
      security:
      - basicAuth: []
    post:
      tags:
      - producer-controller
      operationId: saveProducer
      parameters:
      - name: x-api-version
        in: header
        schema:
          type: string
          enum:
          - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProducerPostRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProducerPostResponse'
      security:
      - basicAuth: []
  /v1/animes:
    get:
      tags:
      - anime-controller
      operationId: listAllAnime
      parameters:
      - name: name
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimeGetResponse'
      security:
      - basicAuth: []
    put:
      tags:
      - anime-controller
      operationId: updateAnime
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimePutRequest'
        required: true
      responses:
        "200":
          description: OK
      security:
      - basicAuth: []
    post:
      tags:
      - anime-controller
      operationId: saveAnime
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimePostRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AnimePostResponse'
      security:
      - basicAuth: []
  /v1/animes/{id}:
    get:
      tags:
      - anime-controller
      operationId: findAnimeById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AnimeGetResponse'
      security:
      - basicAuth: []
    delete:
      tags:
      - anime-controller
      operationId: deleteAnimeById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
      security:
      - basicAuth: []
  /v1/animes/paginated:
    get:
      tags:
      - anime-controller
      operationId: listAllAnimePaginated
      x-spring-paginated: true
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAnimeGetResponse'
      security:
      - basicAuth: []
  /v1/producers/{id}:
    delete:
      tags:
      - producer-controller
      operationId: deleteProducerById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
      security:
      - basicAuth: []
components:
  schemas:
    ProducerPutRequest:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          x-field-extra-annotation: "@jakarta.validation.constraints.NotNull()"
        name:
          type: string
          x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message=\"The field 'name' is required\")"
    AnimePutRequest:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message=\"The field 'name' is required\")"
    ProducerPostRequest:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message=\"The field 'name' is required\")"
    ProducerPostResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    AnimePostRequest:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Name of Anime to update
          x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message=\"The field 'name' is required\")"
    AnimePostResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    ProducerGetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    AnimeGetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    PageAnimeGetResponse:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/AnimeGetResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        paged:
          type: boolean
        unpaged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
